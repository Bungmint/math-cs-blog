<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Youngmin&apos;s Blog</title>
    <description>A math &amp; cs major trying to find meaning of life</description>
    <link>http://localhost:4000/math-cs-blog/</link>
    <atom:link href="http://localhost:4000/math-cs-blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Mar 2023 21:30:47 -0800</pubDate>
    <lastBuildDate>Thu, 02 Mar 2023 21:30:47 -0800</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>February Problem-solving</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://cses.fi/problemset/task/2181&quot;&gt;CSES Counting Tiles&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt;Solution&lt;/summary&gt;

  &lt;p&gt;This technique is called “DP on broken profile”. Interesting to note that
problem K from ICPC PACNW Regionals from today can also be solved using this technique
(Thankfully, in the contest, I was able to solve it quite straightforwardly). This problem is easier as we only have to
maintain a bitmask of which tiles are open. This allows a
$O(nm2^n)$ solution. The dp states are $dp[i][j][mask]$, where
$(i, j)$ is the corner, but since $dp[i][j]$ relies solely on
$dp[i][j - 1]$, we can drop the first two dimensions leading
to a $O(2^n)$ memory.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/662/problem/C&quot;&gt;CodeForces 662C&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt;Solution&lt;/summary&gt;

  &lt;p&gt;Bitmask DP + Finding the linear recurrence. We can first think of
each column as a bitmask of length $n$, labeling them $col_1$,
$col_2$, $\dots$, $col_m$. Then, the rows that are being inversed
could be also represented as a bitmask of length $n$, denoted as
$mask$. Then, we are calculating the $mask$ that minimizes the sum&lt;/p&gt;

\[\sum_{i = 1}^{m} \min(pc(mask \oplus col_i), n - pc(mask \oplus col_i))\]

  &lt;p&gt;where $pc$ is the popcount function. This takes $O(2^n m)$, which is very slow. In order to improve this, we define $dp[k][mask]$ to be the number of $col_i$ such that $pc(col_i, mask) = k$. We can easily calculate $dp[0][mask]$ in $O(m)$ as $mask$ has to equal $col_i$. Suppose $k &amp;gt; 0$, and $pc(col_i, mask) = k$. We can consider a position $p$, such that $col_i$ and $mask$ differs in. Then, there would be $dp[k - 1][mask \oplus 2^p]$ possible columns, but it could be possible that $col_i$ and $mask \oplus 2^p$ differs in position $p$ again, so we have to subtract $dp[k - 2][mask]$, and repeating this process, if $pmask$ denotes $mask \oplus 2^p$, we get&lt;/p&gt;

\[dp[k - 1][pmask] - dp[k - 2][mask] + dp[k - 3][pmask] - \dots\]

  &lt;p&gt;If we sum for all $0 \leq p \leq n - 1$, then we would count each $col_i$ $k$ times, so $k \cdot dp[k][mask]$. Hence,&lt;/p&gt;

\[dp[k][mask] = \frac{1}{k} \sum_{p = 0}^{n - 1} \sum_{f = 1}^{k} (-1)^{f - 1} dp[k - f][mask \oplus (2^p \cdot (f \bmod 2))]\]

  &lt;p&gt;There are $n \cdot 2^n$ states and $n^2$ per transition, yielding a $O(n^3 \cdot 2^n)$ which is still too slow. Note that&lt;/p&gt;

\[\sum_{p = 0}^{n - 1} \sum_{f = 3}^{k} (-1)^{f - 1} dp[k - f][mask \oplus (2^p \cdot (f \bmod 2))]
= (k - 2)dp[k - 2][mask]\]

  &lt;p&gt;so&lt;/p&gt;

\[dp[k][mask] = \frac{1}{k} \left((k - 2 - n)dp[k - 2][mask] +
\sum_{p = 0}^{n - 1} dp[k - 1][mask \oplus 2^p]\right)\]

  &lt;p&gt;yielding a $O(n)$ transition, hence, a $O(n^2 \cdot 2^n)$ solution.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://oj.uz/problem/view/CEOI16_kangaroo&quot;&gt;CEOI 2016 Kangaroo&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt;Solution&lt;/summary&gt;

  &lt;p&gt;Connected component DP. Note that the problem can be restated as counting the number of permutation $p_1$, $\dots$, $p_n$, such that $p_1 = cs$, $p_n = cf$, and for all $2 \leq i \leq n - 1$, either $p_{i - 1} &amp;lt; p_i &amp;gt; p_{i + 1}$ or $p_{i - 1} &amp;gt; p_i &amp;lt; p_{i + 1}$ holds. Then, we can proceed with the typical dp states $dp[i][j]$ which represents the number of correct permutations, partially filled with $1$ to $i$, that has $j$ connected components. We note that because we insert the elements in increasing order, we can only either merge two connected components or add an independent component. Obviously, the corner cases are when $i = cs$ or $i = cf$, but they are trivial. Thus, we get a $O(n^2)$ solution with $O(n)$ memory usage.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1634/F&quot;&gt;CodeForces 1634F&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt;Solution&lt;/summary&gt;

  &lt;p&gt;Modified prefix sum. Consider $C_i = A_i - B_i$, and $D_1 = C_1$, $D_2 = C_2 - C_1$, $D_i =
C_i - C_{i - 1} - C_{i - 2}$. Note that $A = B$ if and only if $D_i = 0$ for all $i$.
Also, for each query $[l, r]$, only $D_l \mathrel{+}= 1$, $D_{r + 1} \mathrel{-}= F_{r - l + 2}$, $D_{r + 2} \mathrel{-}= F_{r - l + 1}$.
So we can easily update $D$ by precomputing the Fibonacci numbers. Hence, we get a
$O(N + Q)$ solution.&lt;/p&gt;

&lt;/details&gt;
</description>
        <pubDate>Sat, 25 Feb 2023 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/math-cs-blog/February-problems/</link>
        <guid isPermaLink="true">http://localhost:4000/math-cs-blog/February-problems/</guid>
        
        <category>problem-solving</category>
        
        
      </item>
    
      <item>
        <title>Aho-Corasick and Applications</title>
        <description>&lt;p&gt;&lt;em&gt;Prerequisites:&lt;/em&gt; Aho-Corasick&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Problems&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1400/F&quot;&gt;CodeForces Edu Round 94 F&lt;/a&gt;&lt;/p&gt;

&lt;details&gt;

  &lt;summary&gt; Solution &lt;/summary&gt;

  &lt;p&gt;Bruteforce + Aho-Corasick + DP&lt;/p&gt;

  &lt;p&gt;Note that the maximum number of x-prime strings for $x \leq 20$ is $2399$ and the size of the
automaton created by those strings is at most $5000$. If we let $m$ to be the size of the AC
Automaton, we can get a simple $\mathcal{O}(|S|m)$ DP where a dp state $dp_{i, j}$ stores the
minimum number of characters removed in the prefix $S[1\dots i]$, such that we have the resulting
string ending up at vertex $j$ in the AC Automaton.&lt;/p&gt;

&lt;/details&gt;
</description>
        <pubDate>Sun, 15 Jan 2023 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/math-cs-blog/Aho-Corasick-and-applications/</link>
        <guid isPermaLink="true">http://localhost:4000/math-cs-blog/Aho-Corasick-and-applications/</guid>
        
        <category>string</category>
        
        
      </item>
    
      <item>
        <title>First Post</title>
        <description>&lt;p&gt;Hello! I am Youngmin Park, a first-year math &amp;amp; compsci major at UC Berkeley. I decided to make a blog to become
a more organized person as my notes have been everywhere, very disorganized. Hopefully, this would change.
Anyways, I will probably write things related to my studies, and competitive programming stuff.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2023 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/math-cs-blog/first-post/</link>
        <guid isPermaLink="true">http://localhost:4000/math-cs-blog/first-post/</guid>
        
        <category>intro</category>
        
        
      </item>
    
      <item>
        <title>January Problem-solving (1)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/arc088/tasks/arc088_c&quot;&gt;ARC 88E Papple Sort&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt;Solution&lt;/summary&gt;

  &lt;p&gt;Without loss of generality, let the length of the string be even.
Consider for each character $c$, the set $S_c = \{i | s_i = c\}$. In the resulting palindrome, each index in $S_c$ is paired
with another index in $S_c$. Since it is unideal to swap between two adjacent characters that are the same, the ordering of the indices
in $S_c$ does not change. Hence, The smallest index gets paired with the largest index, and so on.
Now, we can transform the given problem into the following problem: &lt;br /&gt;&lt;/p&gt;

  &lt;p&gt;We have $k$ pairs with distinct left and right indices. We assign $0\sim k-1$ for each pair. If a pair gets
assigned $i$, then $a_l = i, a_r = 2k - i$ for the array $a$ of size $2k$. What is the minimum number of inversion of $a$?&lt;/p&gt;

  &lt;p&gt;Thinking of the pairs as intervals, it should be clear that for nested pairs, the inversion count is either 0 or 2,
non-nested, intersecting pairs always have an inversion count of 1, and non-intersecting pairs always have an inversion count of 2.
Hence, we have to minimize the inversion count for every nested pairs.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; It is possible to obtain an inversion count of 0 for each nested pair.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Proof.&lt;/strong&gt; Think of the pairs as vertices, and whenever a pair is nested in another pair, add a directed edge to it. Clearly,
this digraph is acylic, so if we label the pairs accordingly to the topological sort, we can achieve the inversion count of 0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;So, the problem is reduced down to calculating the total number of intersecting pairs, and non-intersecting pairs which
can be solved using a BIT/Segment Tree in $\mathcal{O}(N\log N)$.&lt;/p&gt;

  &lt;p&gt;For odd length strings, we can manually add the inversion count of the one character by iterating over the pairs.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/959/problem/F&quot;&gt;CodeForces Round #473 Div 2F&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt; Solution &lt;/summary&gt;

  &lt;p&gt;Offline query, XOR Basis, and the Fundamental Theorem of Linear Algebra solves the problem
(Technically, we could store the basis of each prefix since $|B|\leq 20$ as $a_i &amp;lt; 2^{20}$, and $N \leq 10^5$,
so we could solve the queries online).
We could think of the 20-bit integers as vectors in $\mathbb{Z}_2^{20}$, and this allows us
to transform the problem into a straightforward linear algebra problem:&lt;/p&gt;

  &lt;p&gt;Let $T:\mathbb{Z}_2^N\mapsto\mathbb{Z}_2^{20}$, $T(v_1, v_2, \ldots, v_N) = \oplus_{i = 1}^N v_ia_i.$
Calculate the number of vector $u$, such that $Tu = x$.&lt;/p&gt;

  &lt;p&gt;Clearly, if $x$ is not in the span of the basis of $a_1, a_2, \ldots, a_N$, $B$, the answer is zero.
Now, suppose $Tu = x$. Then, if $Tv = x \implies T(u - v) = 0$, hence, the answer is the number of
vectors in the null space of $T$. By the Fundamental Theorem of Linear Algebra, $\dim\operatorname{Null}(T) = 
\dim V - \dim\operatorname{range}(T) = N - |B|$, hence, $|\operatorname{Null}(T)| = 2^{N - |B|}$.&lt;/p&gt;

  &lt;p&gt;Calculating the basis of the prefix of $a$ can be done incrementally in $\mathcal{O}(\log\max a_i)$ and
checking if $x$ is in the basis can be done in a similar fashion, which yields a $\mathcal{O}((N+Q)\log\max a_i)$
solution.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/14859&quot;&gt;BOJ 14859 Three-way Coprime&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt; Description (for those who can&apos;t read Korean) &lt;/summary&gt;

  &lt;p&gt;Given a sequence of length $N, N \leq 10^5, a_1, a_2, \ldots, a_N$, $1 \leq a_i \leq 10^6$,
count all triplets $(i, j, k), 1 \leq i &amp;lt; j &amp;lt; k \leq N$ that satisfies $\gcd(a_i, a_j, a_k) = 1$.&lt;/p&gt;

&lt;/details&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt; Solution &lt;/summary&gt;

  &lt;p&gt;Typical number theory approach where we iterate over the multiples of an integer.&lt;/p&gt;

  &lt;p&gt;Let &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;freq&lt;/code&gt; be the frequency array, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;freq[i]&lt;/code&gt; stores $\vert\{j : i \vert a_j \}\vert$, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cnt[d]&lt;/code&gt; be
the number of triplets $(i, j, k)$, such that $\gcd(a_i, a_j, a_k) = d$. Clearly, answer is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cnt[1]&lt;/code&gt;.&lt;/p&gt;

\[cnt[d] = \binom{freq[i]}{3} - \sum_{j = 2}^{\left\lfloor\frac{\max a_i}{d}\right\rfloor} cnt[jd]\]

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/7966&quot;&gt;POI 2005 Template&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt; Solution &lt;/summary&gt;

  &lt;p&gt;KMP + A bit of observations&lt;/p&gt;

  &lt;p&gt;Possible templates of $S$ are itself and the templates of $S[0:\pi[|S| - 1] - 1]$.
Note that if $\pi[|S| - 1] &amp;gt;= \frac{|S|}{2}$, then $S[0:\pi[|S| - 1] - 1]$ is indeed a template.
So we only have to check when the value of the prefix function halves or more. It is clear that
this can only happen $\mathcal{O}(\log |S|)$ times, so even with a naive $\mathcal{O}(|S|)$ checking,
we get a $\mathcal{O}(|S|\log |S|)$ solution.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1743/problem/F&quot;&gt;CodeForces Edu Round #137 F&lt;/a&gt;&lt;/p&gt;

&lt;details style=&quot;margin-bottom: 5%&quot;&gt;

  &lt;summary&gt; Solution &lt;/summary&gt;

  &lt;p&gt;Contribution technique + Segment Tree storing matrices.&lt;/p&gt;

  &lt;p&gt;It is easy to see that we could count the contribution of each integer in $0\dots 3\times 10^5$.
For each integer, we could consider a dp, and the transition can be modelled using $2\times 2$
matrices, suggesting we should use a segment tree. Also, transitioning from $i$ to $i + 1$ can be
easily done by storing the indices of segments that have the left boundary as $i + 1$ or right boundary
as $i$. This allows a $\mathcal{O}((N + MAX)\log N)$ with a constant factor of 8 for matrix multiplication.&lt;/p&gt;

&lt;/details&gt;
</description>
        <pubDate>Thu, 05 Jan 2023 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/math-cs-blog/January-problems-1/</link>
        <guid isPermaLink="true">http://localhost:4000/math-cs-blog/January-problems-1/</guid>
        
        <category>problem-solving</category>
        
        
      </item>
    
  </channel>
</rss>
